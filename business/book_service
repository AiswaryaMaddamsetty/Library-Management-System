from data.book_dao import BookDaoDAO

class BookService:
    """Business logic for managing books."""

    # --- Create ---
    @staticmethod
    def add_new_book(title, author, isbn, total_copies):
        if total_copies <= 0:
            raise ValueError("Total copies must be greater than zero.")
        BookDaoDAO.add_book(title, author, isbn, total_copies)

    # --- Read ---
    @staticmethod
    def get_all_books():
        return BookDaoDAO.get_all_books()

    @staticmethod
    def search_books(keyword):
        return BookDaoDAO.search_books(keyword)

    # --- Update ---
    @staticmethod
    def update_existing_book(book_id, title, author, isbn, total_copies, available_copies):
        if total_copies < 1:
            raise ValueError("Book must have at least one copy.")
        BookDaoDAO.update_book(book_id, title, author, isbn, total_copies, available_copies)

    # --- Delete ---
    @staticmethod
    def delete_book(book_id):
        # Example business rule before delete
        books = BookDaoDAO.get_all_books()
        book_ids = [b[0] for b in books]
        if book_id not in book_ids:
            raise ValueError("Book not found.")
        BookDaoDAO.delete_book(book_id)
    @staticmethod
    def update_availability(book_id, available_copies):
        books = BookDaoDAO.get_all_books()
        book = next((b for b in books if b[0] == book_id), None)
        if not book:
            raise ValueError("Book not found.")
        BookDaoDAO.update_book(book_id, book[1], book[2], book[3], book[4], available_copies)
